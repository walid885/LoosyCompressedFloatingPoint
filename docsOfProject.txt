Loosy Compressed Floating Point Documentation
Introduction
This project involves the implementation of a parallel compression analysis using MPI (Message Passing Interface) in Python. The goal is to efficiently utilize multi-core processors to analyze and compress floating-point data.

System Requirements
Operating System: Ubuntu Linux (or similar)

CPU: Multi-core processor (e.g., AMD Ryzen 5 5600H)

Memory: Sufficient RAM to handle parallel processes

Software:

Open MPI (for parallel processing)

Python 3.x (with mpi4py library)

Required Python packages: numpy, matplotlib, seaborn, pandas, scipy, zlib, json

Setup Instructions
Install Open MPI:

bash
sudo apt update
sudo apt install openmpi-bin libopenmpi-dev
Install Python and Required Packages:

bash
sudo apt install python3 python3-dev python3-venv
python3 -m venv mpi_env
source mpi_env/bin/activate
pip install --no-cache-dir mpi4py numpy matplotlib seaborn pandas scipy zlib json
Verify MPI Installation:

bash
mpirun --version
Verify mpi4py Installation:

bash
pip show mpi4py
Running the Program
Create a Bash Script (run_mpi_analysis.sh):

bash
#!/bin/bash
CORE_COUNTS=(1 2 4 6 12)
for cores in "${CORE_COUNTS[@]}"; do
    echo "Running analysis with $cores core(s)"
    if [ $cores -gt 6 ]; then
        mpirun --use-hwthread-cpus -np $cores python3 mpite.py
    else
        mpirun -np $cores python3 mpite.py
    fi
    echo "Analysis with $cores core(s) completed"
done
Make the Script Executable:

bash
chmod +x run_mpi_analysis.sh
Run the Script:

bash
./run_mpi_analysis.sh
Troubleshooting
Executable Not Found: Ensure mpirun and Python are correctly installed and accessible.

Insufficient Slots: Use --use-hwthread-cpus for more than 6 cores or --oversubscribe for more processes than slots.

Performance Issues: Monitor resource usage and adjust core counts accordingly.

Future Improvements
Optimize Compression Algorithms: Explore more efficient compression techniques.

Enhance Parallelization: Investigate other parallelization frameworks for comparison.

Notes for README.md Creation
When creating your README.md, consider including:

A brief project description

Setup instructions with code blocks

Running the program with examples

Troubleshooting tips

Future development plans

Save this file as documentation.txt for now. You can later convert it into a Markdown file (README.md) for your project repository.

